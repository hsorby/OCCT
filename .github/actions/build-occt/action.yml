name: 'Build OCCT'
description: 'Prepare and build OCCT on a specific platform'

inputs:
  platform:
    description: 'Platform (windows, macos, linux)'
    required: true
  compiler:
    description: 'Compiler (msvc, clang, gcc)'
    required: true
  artifact-name:
    description: 'Name of the artifact to store build results'
    required: true
  additional-cmake-flags:
    description: 'Additional CMake flags'
    required: false
    default: ''
  use-vtk:
    description: 'Enable VTK'
    required: false
    default: 'true'
  build-use-pch:
    description: 'Enable precompiled headers'
    required: false
    default: 'true'
  build-opt-profile:
    description: 'Build optimization profile'
    required: false
    default: 'Production'
  cmake-build-type:
    description: 'CMake build type (Release, Debug, etc)'
    required: false
    default: 'Release'

runs:
  using: "composite"
  steps:

    - name: Configure OCCT (Windows MSVC)
      if: ${{ inputs.platform == 'windows' && inputs.compiler == 'msvc' }}
      shell: pwsh
      run: |
          mkdir build
          cd build
          cmake -T host=x64 `
                -D USE_FREETYPE=OFF `
                -D USE_TK=OFF `
                -D BUILD_USE_PCH=${{ inputs.build-use-pch }} `
                -D BUILD_OPT_PROFILE=${{ inputs.build-opt-profile }} `
                -D BUILD_INCLUDE_SYMLINK=ON `
                -D CMAKE_BUILD_TYPE=${{ inputs.cmake-build-type }} `
                -D 3RDPARTY_DIR=${{ github.workspace }}/3rdparty-vc14-64 `
                -D INSTALL_DIR=${{ github.workspace }}/install `
                -D USE_D3D=OFF `
                -D USE_DRACO=OFF `
                -D USE_FFMPEG=OFF `
                -D USE_FREEIMAGE=OFF `
                -D USE_GLES2=OFF `
                -D USE_OPENVR=OFF `
                -D USE_VTK=${{ inputs.use-vtk }} `
                -D USE_TBB=OFF `
                -D USE_RAPIDJSON=OFF `
                -D USE_OPENGL=OFF `
                -D BUILD_GTEST=OFF `
                -D BUILD_GTEST=OFF `
                -D BUILD_GTEST=OFF `
                -D BUILD_MODULE_Draw=OFF `
                -D BUILD_MODULE_Visualization=OFF `
                -D BUILD_MODULE_ModelingAlgorithms=OFF `
                -D USE_GIT_HASH=OFF `
                -D BUILD_CPP_STANDARD=C++17 `
                ${{ inputs.additional-cmake-flags }} ..

    - name: Configure OCCT (Windows Clang)
      if: ${{ inputs.platform == 'windows' && inputs.compiler == 'clang' }}
      shell: pwsh
      run: |
          mkdir build
          cd build
          cmake -G "Ninja" `
                -D CMAKE_C_COMPILER=clang `
                -D CMAKE_CXX_COMPILER=clang++ `
                -D USE_FREETYPE=OFF `
                -D USE_TK=OFF `
                -D BUILD_USE_PCH=${{ inputs.build-use-pch }} `
                -D BUILD_OPT_PROFILE=${{ inputs.build-opt-profile }} `
                -D BUILD_INCLUDE_SYMLINK=ON `
                -D CMAKE_BUILD_TYPE=${{ inputs.cmake-build-type }} `
                -D 3RDPARTY_DIR=${{ github.workspace }}/3rdparty-vc14-64 `
                -D INSTALL_DIR=${{ github.workspace }}/install `
                -D USE_D3D=OFF `
                -D USE_DRACO=OFF `
                -D USE_FFMPEG=OFF `
                -D USE_FREEIMAGE=OFF `
                -D USE_GLES2=OFF `
                -D USE_OPENVR=OFF `
                -D USE_VTK=${{ inputs.use-vtk }} `
                -D USE_TBB=OFF `
                -D USE_RAPIDJSON=OFF `
                -D USE_OPENGL=OFF `
                -D BUILD_GTEST=OFF `
                -D BUILD_MODULE_Draw=OFF `
                -D BUILD_MODULE_Visualization=OFF `
                -D BUILD_MODULE_ModelingAlgorithms=OFF `
                -D USE_GIT_HASH=OFF `
                -D BUILD_CPP_STANDARD=C++17 `
                -D INSTALL_GTEST=OFF `
                ${{ inputs.additional-cmake-flags }} ..

    - name: Configure OCCT (macOS)
      if: ${{ inputs.platform == 'macos' }}
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -G "Unix Makefiles" \
              -D CMAKE_C_COMPILER=${{ inputs.compiler == 'clang' && 'clang' || 'gcc' }} \
              -D CMAKE_CXX_COMPILER=${{ inputs.compiler == 'clang' && 'clang++' || 'g++' }} \
              -D CMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
              -D BUILD_USE_PCH=${{ inputs.build-use-pch }} \
              -D BUILD_OPT_PROFILE=${{ inputs.build-opt-profile }} \
              -D BUILD_INCLUDE_SYMLINK=ON \
              -D CMAKE_BUILD_TYPE=${{ inputs.cmake-build-type }} \
              -D INSTALL_DIR=${{ github.workspace }}/install \
              -D USE_RAPIDJSON=OFF \
              -D USE_DRACO=OFF \
              -D USE_FREETYPE=OFF \
              -D USE_OPENGL=OFF \
              -D USE_FREEIMAGE=OFF \
              -D BUILD_GTEST=OFF \
              -D BUILD_CPP_STANDARD=C++17 \
              -D INSTALL_GTEST=OFF \
              -D BUILD_MODULE_Draw=OFF \
              -D BUILD_MODULE_Visualization=OFF \
              -D BUILD_MODULE_ModelingAlgorithms=OFF \
              -D USE_GIT_HASH=OFF \
              -D CMAKE_CXX_FLAGS="-Werror -Wall -Wextra" \
              ${{ inputs.additional-cmake-flags }} ..

    - name: Configure OCCT (Linux)
      if: ${{ inputs.platform == 'linux' }}
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -G "Unix Makefiles" \
              -D CMAKE_C_COMPILER=${{ inputs.compiler == 'clang' && 'clang' || 'gcc' }} \
              -D CMAKE_CXX_COMPILER=${{ inputs.compiler == 'clang' && 'clang++' || 'g++' }} \
              -D BUILD_USE_PCH=${{ inputs.build-use-pch }} \
              -D BUILD_INCLUDE_SYMLINK=ON \
              -D BUILD_OPT_PROFILE=${{ inputs.build-opt-profile }} \
              -D USE_TK=OFF \
              -D CMAKE_BUILD_TYPE=${{ inputs.cmake-build-type }} \
              -D INSTALL_DIR=${{ github.workspace }}/install \
              -D USE_FREETYPE=OFF \
              -D USE_DRACO=OFF \
              -D USE_FFMPEG=OFF \
              -D USE_FREEIMAGE=OFF \
              -D USE_GLES2=OFF \
              -D USE_OPENVR=OFF \
              -D USE_VTK=${{ inputs.use-vtk }} \
              -D USE_TBB=OFF \
              -D USE_RAPIDJSON=OFF \
              -D USE_OPENGL=OFF \
              -D USE_XLIB=OFF \
              -D BUILD_GTEST=OFF \
              -D BUILD_CPP_STANDARD=C++17 \
              -D BUILD_MODULE_Draw=OFF \
              -D BUILD_MODULE_Visualization=OFF \
              -D BUILD_MODULE_ModelingAlgorithms=OFF \
              -D USE_GIT_HASH=OFF \
              ${{ inputs.additional-cmake-flags }} ..

    - name: Build OCCT (Windows)
      if: ${{ inputs.platform == 'windows' }}
      shell: pwsh
      run: |
          cd build
          cmake --build . --target install --config Release

    - name: Build OCCT (macOS)
      if: ${{ inputs.platform == 'macos' }}
      shell: bash
      run: |
        cd build
        make install -j$(sysctl -n hw.logicalcpu)

    - name: Build OCCT (Linux)
      if: ${{ inputs.platform == 'linux' }}
      shell: bash
      run: |
        cd build
        cmake --build . --target install --config Release -- -j

    - name: Upload install directory
      uses: actions/upload-artifact@v4.4.3
      with:
        name: ${{ inputs.artifact-name }}
        path: install
        retention-days: 7
